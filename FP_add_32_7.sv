// Generated by CIRCT firtool-1.62.0
module full_subtractor(
  input  [7:0] io_in_a,
               io_in_b,
  output [7:0] io_out_s,
  output       io_out_c
);

  wire [8:0] result = {1'h0, io_in_a} - {1'h0, io_in_b};
  assign io_out_s = result[7:0];
  assign io_out_c = result[8];
endmodule

module full_adder(
  input  [23:0] io_in_a,
                io_in_b,
  output [23:0] io_out_s,
  output        io_out_c
);

  wire [24:0] result = {1'h0, io_in_a} + {1'h0, io_in_b};
  assign io_out_s = result[23:0];
  assign io_out_c = result[24];
endmodule

module LZC_enc2(
  input  [1:0] io_in_r,
  output [1:0] io_out_e
);

  assign io_out_e = io_in_r == 2'h0 ? 2'h2 : {1'h0, io_in_r == 2'h1};
endmodule

module LZC_Merge2(
  input  [1:0] io_in_h,
               io_in_l,
  output [2:0] io_out_m
);

  assign io_out_m =
    {io_in_h[1] & io_in_l[1],
     io_in_h[1] ? ~(io_in_l[1]) : io_in_h[1],
     io_in_h[1] ? io_in_l[0] : io_in_h[0]};
endmodule

module LZC_Merge3(
  input  [2:0] io_in_h,
               io_in_l,
  output [3:0] io_out_m
);

  assign io_out_m =
    {io_in_h[2] & io_in_l[2],
     io_in_h[2] ? ~(io_in_l[2]) : io_in_h[2],
     io_in_h[2] ? io_in_l[1:0] : io_in_h[1:0]};
endmodule

module LZC_Merge4(
  input  [3:0] io_in_h,
               io_in_l,
  output [4:0] io_out_m
);

  assign io_out_m =
    {io_in_h[3] & io_in_l[3],
     io_in_h[3] ? ~(io_in_l[3]) : io_in_h[3],
     io_in_h[3] ? io_in_l[2:0] : io_in_h[2:0]};
endmodule

module LZC_Merge5(
  input  [4:0] io_in_h,
               io_in_l,
  output [5:0] io_out_m
);

  assign io_out_m =
    {io_in_h[4] & io_in_l[4],
     io_in_h[4] ? ~(io_in_l[4]) : io_in_h[4],
     io_in_h[4] ? io_in_l[3:0] : io_in_h[3:0]};
endmodule

module LZC32_2(
  input  [31:0] io_in_d,
  output [5:0]  io_out_c
);

  wire [4:0] _LZC_Merge4_1_io_out_m;
  wire [4:0] _LZC_Merge4_io_out_m;
  wire [3:0] _LZC_Merge3_3_io_out_m;
  wire [3:0] _LZC_Merge3_2_io_out_m;
  wire [3:0] _LZC_Merge3_1_io_out_m;
  wire [3:0] _LZC_Merge3_io_out_m;
  wire [2:0] _LZC_Merge2_7_io_out_m;
  wire [2:0] _LZC_Merge2_6_io_out_m;
  wire [2:0] _LZC_Merge2_5_io_out_m;
  wire [2:0] _LZC_Merge2_4_io_out_m;
  wire [2:0] _LZC_Merge2_3_io_out_m;
  wire [2:0] _LZC_Merge2_2_io_out_m;
  wire [2:0] _LZC_Merge2_1_io_out_m;
  wire [2:0] _LZC_Merge2_io_out_m;
  wire [1:0] _LZC_enc2_15_io_out_e;
  wire [1:0] _LZC_enc2_14_io_out_e;
  wire [1:0] _LZC_enc2_13_io_out_e;
  wire [1:0] _LZC_enc2_12_io_out_e;
  wire [1:0] _LZC_enc2_11_io_out_e;
  wire [1:0] _LZC_enc2_10_io_out_e;
  wire [1:0] _LZC_enc2_9_io_out_e;
  wire [1:0] _LZC_enc2_8_io_out_e;
  wire [1:0] _LZC_enc2_7_io_out_e;
  wire [1:0] _LZC_enc2_6_io_out_e;
  wire [1:0] _LZC_enc2_5_io_out_e;
  wire [1:0] _LZC_enc2_4_io_out_e;
  wire [1:0] _LZC_enc2_3_io_out_e;
  wire [1:0] _LZC_enc2_2_io_out_e;
  wire [1:0] _LZC_enc2_1_io_out_e;
  wire [1:0] _LZC_enc2_io_out_e;
  LZC_enc2 LZC_enc2 (
    .io_in_r  (io_in_d[1:0]),
    .io_out_e (_LZC_enc2_io_out_e)
  );
  LZC_enc2 LZC_enc2_1 (
    .io_in_r  (io_in_d[3:2]),
    .io_out_e (_LZC_enc2_1_io_out_e)
  );
  LZC_enc2 LZC_enc2_2 (
    .io_in_r  (io_in_d[5:4]),
    .io_out_e (_LZC_enc2_2_io_out_e)
  );
  LZC_enc2 LZC_enc2_3 (
    .io_in_r  (io_in_d[7:6]),
    .io_out_e (_LZC_enc2_3_io_out_e)
  );
  LZC_enc2 LZC_enc2_4 (
    .io_in_r  (io_in_d[9:8]),
    .io_out_e (_LZC_enc2_4_io_out_e)
  );
  LZC_enc2 LZC_enc2_5 (
    .io_in_r  (io_in_d[11:10]),
    .io_out_e (_LZC_enc2_5_io_out_e)
  );
  LZC_enc2 LZC_enc2_6 (
    .io_in_r  (io_in_d[13:12]),
    .io_out_e (_LZC_enc2_6_io_out_e)
  );
  LZC_enc2 LZC_enc2_7 (
    .io_in_r  (io_in_d[15:14]),
    .io_out_e (_LZC_enc2_7_io_out_e)
  );
  LZC_enc2 LZC_enc2_8 (
    .io_in_r  (io_in_d[17:16]),
    .io_out_e (_LZC_enc2_8_io_out_e)
  );
  LZC_enc2 LZC_enc2_9 (
    .io_in_r  (io_in_d[19:18]),
    .io_out_e (_LZC_enc2_9_io_out_e)
  );
  LZC_enc2 LZC_enc2_10 (
    .io_in_r  (io_in_d[21:20]),
    .io_out_e (_LZC_enc2_10_io_out_e)
  );
  LZC_enc2 LZC_enc2_11 (
    .io_in_r  (io_in_d[23:22]),
    .io_out_e (_LZC_enc2_11_io_out_e)
  );
  LZC_enc2 LZC_enc2_12 (
    .io_in_r  (io_in_d[25:24]),
    .io_out_e (_LZC_enc2_12_io_out_e)
  );
  LZC_enc2 LZC_enc2_13 (
    .io_in_r  (io_in_d[27:26]),
    .io_out_e (_LZC_enc2_13_io_out_e)
  );
  LZC_enc2 LZC_enc2_14 (
    .io_in_r  (io_in_d[29:28]),
    .io_out_e (_LZC_enc2_14_io_out_e)
  );
  LZC_enc2 LZC_enc2_15 (
    .io_in_r  (io_in_d[31:30]),
    .io_out_e (_LZC_enc2_15_io_out_e)
  );
  LZC_Merge2 LZC_Merge2 (
    .io_in_h  (_LZC_enc2_15_io_out_e),
    .io_in_l  (_LZC_enc2_14_io_out_e),
    .io_out_m (_LZC_Merge2_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_1 (
    .io_in_h  (_LZC_enc2_13_io_out_e),
    .io_in_l  (_LZC_enc2_12_io_out_e),
    .io_out_m (_LZC_Merge2_1_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_2 (
    .io_in_h  (_LZC_enc2_11_io_out_e),
    .io_in_l  (_LZC_enc2_10_io_out_e),
    .io_out_m (_LZC_Merge2_2_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_3 (
    .io_in_h  (_LZC_enc2_9_io_out_e),
    .io_in_l  (_LZC_enc2_8_io_out_e),
    .io_out_m (_LZC_Merge2_3_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_4 (
    .io_in_h  (_LZC_enc2_7_io_out_e),
    .io_in_l  (_LZC_enc2_6_io_out_e),
    .io_out_m (_LZC_Merge2_4_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_5 (
    .io_in_h  (_LZC_enc2_5_io_out_e),
    .io_in_l  (_LZC_enc2_4_io_out_e),
    .io_out_m (_LZC_Merge2_5_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_6 (
    .io_in_h  (_LZC_enc2_3_io_out_e),
    .io_in_l  (_LZC_enc2_2_io_out_e),
    .io_out_m (_LZC_Merge2_6_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_7 (
    .io_in_h  (_LZC_enc2_1_io_out_e),
    .io_in_l  (_LZC_enc2_io_out_e),
    .io_out_m (_LZC_Merge2_7_io_out_m)
  );
  LZC_Merge3 LZC_Merge3 (
    .io_in_h  (_LZC_Merge2_io_out_m),
    .io_in_l  (_LZC_Merge2_1_io_out_m),
    .io_out_m (_LZC_Merge3_io_out_m)
  );
  LZC_Merge3 LZC_Merge3_1 (
    .io_in_h  (_LZC_Merge2_2_io_out_m),
    .io_in_l  (_LZC_Merge2_3_io_out_m),
    .io_out_m (_LZC_Merge3_1_io_out_m)
  );
  LZC_Merge3 LZC_Merge3_2 (
    .io_in_h  (_LZC_Merge2_4_io_out_m),
    .io_in_l  (_LZC_Merge2_5_io_out_m),
    .io_out_m (_LZC_Merge3_2_io_out_m)
  );
  LZC_Merge3 LZC_Merge3_3 (
    .io_in_h  (_LZC_Merge2_6_io_out_m),
    .io_in_l  (_LZC_Merge2_7_io_out_m),
    .io_out_m (_LZC_Merge3_3_io_out_m)
  );
  LZC_Merge4 LZC_Merge4 (
    .io_in_h  (_LZC_Merge3_io_out_m),
    .io_in_l  (_LZC_Merge3_1_io_out_m),
    .io_out_m (_LZC_Merge4_io_out_m)
  );
  LZC_Merge4 LZC_Merge4_1 (
    .io_in_h  (_LZC_Merge3_2_io_out_m),
    .io_in_l  (_LZC_Merge3_3_io_out_m),
    .io_out_m (_LZC_Merge4_1_io_out_m)
  );
  LZC_Merge5 LZC_Merge5 (
    .io_in_h  (_LZC_Merge4_io_out_m),
    .io_in_l  (_LZC_Merge4_1_io_out_m),
    .io_out_m (io_out_c)
  );
endmodule

module FP_add_32_7(
  input         clock,
                reset,
                io_in_en,
                io_in_valid,
  input  [31:0] io_in_a,
                io_in_b,
  output [31:0] io_out_s,
  output        io_out_valid
);

  wire [5:0]  _LZC32_2_io_out_c;
  wire [23:0] _full_adder_io_out_s;
  wire        _full_adder_io_out_c;
  wire [7:0]  _exp_subtractor_io_out_s;
  wire        _exp_subtractor_io_out_c;
  reg  [31:0] in_a;
  reg  [31:0] in_b;
  wire [7:0]  exp_wire_0 =
    {1'h0, in_a[30:23]} > 9'hFE ? 8'hFE : in_a[30:23] == 8'h0 ? 8'h1 : in_a[30:23];
  wire [7:0]  exp_wire_1 =
    {1'h0, in_b[30:23]} > 9'hFE ? 8'hFE : in_b[30:23] == 8'h0 ? 8'h1 : in_b[30:23];
  reg         exp_sub_out_c;
  reg  [7:0]  exp_sub_out_s;
  reg  [7:0]  exp_sr_2_0;
  reg  [7:0]  exp_sr_2_1;
  reg  [23:0] whole_frac_sr_2_0;
  reg  [23:0] whole_frac_sr_2_1;
  reg         sign_sr_2_0;
  reg         sign_sr_2_1;
  reg         redundant_op;
  reg  [23:0] fracadd_in_a;
  reg  [23:0] fracadd_in_b;
  reg  [7:0]  ref_exp;
  reg         ref_sign;
  reg         diff_sign;
  reg         frac_adder_out_c;
  reg  [23:0] frac_adder_out_s;
  reg         diff_sign_2;
  reg         redundant_op_2;
  reg         ref_sign_2;
  reg  [7:0]  ref_exp_2;
  reg  [5:0]  leadzeroindex;
  reg  [7:0]  ref_exp_4;
  reg  [23:0] fracadd_outs_2;
  reg         diff_sign_4;
  reg         fracadd_outc_2;
  reg         sign_out_2;
  reg         diff_sign_5;
  reg  [85:0] innermux_frac_true;
  reg  [22:0] innermux_frac_false;
  reg  [7:0]  innermux_exp_true;
  reg  [7:0]  innermux_exp_false;
  reg         sign_out_3;
  reg  [85:0] norm_out_frac_r;
  reg  [7:0]  norm_out_exp;
  reg         norm_out_sign;
  reg         io_out_valid_r;
  reg         io_out_valid_r_1;
  reg         io_out_valid_r_2;
  reg         io_out_valid_r_3;
  reg         io_out_valid_r_4;
  reg         io_out_valid_r_5;
  reg         io_out_valid_r_6;
  always @(posedge clock) begin
    if (io_in_en) begin
      automatic logic        eqexp_arrange =
        exp_sr_2_0 == exp_sr_2_1 & whole_frac_sr_2_1 > whole_frac_sr_2_0;
      automatic logic        _GEN = exp_sub_out_c | eqexp_arrange;
      automatic logic [8:0]  _GEN_0 = {1'h0, ref_exp_4};
      automatic logic [8:0]  red = _GEN_0 - {3'h0, leadzeroindex};
      automatic logic [8:0]  inc = _GEN_0 + 9'h1;
      automatic logic [85:0] _GEN_1 = {63'h0, fracadd_outs_2[22:0]};
      automatic logic        _innermux_exp_true_T_2 = red == 9'h0;
      automatic logic        _innermux_exp_false_T_2 = inc > 9'hFE;
      in_a <= io_in_a;
      in_b <= io_in_b;
      exp_sub_out_c <= _exp_subtractor_io_out_c;
      exp_sub_out_s <= _exp_subtractor_io_out_s;
      exp_sr_2_0 <= exp_wire_0;
      exp_sr_2_1 <= exp_wire_1;
      whole_frac_sr_2_0 <= {1'h1, in_a[22:0]};
      whole_frac_sr_2_1 <= {1'h1, in_b[22:0]};
      sign_sr_2_0 <= in_a[31];
      sign_sr_2_1 <= in_b[31];
      redundant_op <= (exp_sub_out_c ? ~exp_sub_out_s + 8'h1 : exp_sub_out_s) > 8'h17;
      fracadd_in_a <= _GEN ? whole_frac_sr_2_1 : whole_frac_sr_2_0;
      fracadd_in_b <=
        exp_sub_out_c
          ? whole_frac_sr_2_0 >> ~exp_sub_out_s + 8'h1
          : (eqexp_arrange ? whole_frac_sr_2_0 : whole_frac_sr_2_1) >> exp_sub_out_s;
      ref_exp <= exp_sub_out_c ? exp_sr_2_1 : exp_sr_2_0;
      ref_sign <= _GEN ? sign_sr_2_1 : sign_sr_2_0;
      diff_sign <= sign_sr_2_0 ^ sign_sr_2_1;
      frac_adder_out_c <= _full_adder_io_out_c;
      frac_adder_out_s <= _full_adder_io_out_s;
      diff_sign_2 <= diff_sign;
      redundant_op_2 <= redundant_op;
      ref_sign_2 <= ref_sign;
      ref_exp_2 <= ref_exp;
      leadzeroindex <= _LZC32_2_io_out_c;
      ref_exp_4 <= ref_exp_2;
      fracadd_outs_2 <= frac_adder_out_s;
      diff_sign_4 <= diff_sign_2;
      fracadd_outc_2 <= frac_adder_out_c;
      sign_out_2 <= diff_sign_2 & ~redundant_op_2 & ~frac_adder_out_c ^ ref_sign_2;
      diff_sign_5 <= diff_sign_4;
      innermux_frac_true <=
        fracadd_outs_2[23]
          ? _GEN_1
          : red[8] | _innermux_exp_true_T_2 ? 86'h0 : _GEN_1 << leadzeroindex;
      innermux_frac_false <=
        fracadd_outc_2
          ? (inc[8] | _innermux_exp_false_T_2 ? 23'h7FFFFF : fracadd_outs_2[23:1])
          : fracadd_outs_2[22:0];
      innermux_exp_true <=
        fracadd_outs_2[23]
          ? ref_exp_4
          : red[8] | _innermux_exp_true_T_2 ? 8'h1 : red[7:0];
      innermux_exp_false <=
        fracadd_outc_2
          ? (inc[8] | _innermux_exp_false_T_2 ? 8'hFE : inc[7:0])
          : ref_exp_4;
      sign_out_3 <= sign_out_2;
      norm_out_frac_r <= diff_sign_5 ? innermux_frac_true : {63'h0, innermux_frac_false};
      norm_out_exp <= diff_sign_5 ? innermux_exp_true : innermux_exp_false;
      norm_out_sign <= sign_out_3;
      io_out_valid_r <= io_in_valid;
      io_out_valid_r_1 <= io_out_valid_r;
      io_out_valid_r_2 <= io_out_valid_r_1;
      io_out_valid_r_3 <= io_out_valid_r_2;
      io_out_valid_r_4 <= io_out_valid_r_3;
      io_out_valid_r_5 <= io_out_valid_r_4;
      io_out_valid_r_6 <= io_out_valid_r_5;
    end
  end // always @(posedge)
  full_subtractor exp_subtractor (
    .io_in_a  (exp_wire_0),
    .io_in_b  (exp_wire_1),
    .io_out_s (_exp_subtractor_io_out_s),
    .io_out_c (_exp_subtractor_io_out_c)
  );
  full_adder full_adder (
    .io_in_a  (fracadd_in_a),
    .io_in_b  (diff_sign ? ~fracadd_in_b + 24'h1 : fracadd_in_b),
    .io_out_s (_full_adder_io_out_s),
    .io_out_c (_full_adder_io_out_c)
  );
  LZC32_2 LZC32_2 (
    .io_in_d  ({frac_adder_out_s, 8'hFF}),
    .io_out_c (_LZC32_2_io_out_c)
  );
  assign io_out_s = {norm_out_sign, norm_out_exp, norm_out_frac_r[22:0]};
  assign io_out_valid = io_out_valid_r_6;
endmodule

